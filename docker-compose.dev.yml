services:
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./backend:/app
    environment:
      - GO_ENV=development
      - DB_HOST=postgresql
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_NAME=db
      - DB_PORT=5432
    networks:
      - app-network
    depends_on:
      - postgresql

  ai-engine:
    build:
      context: ./ai_engine
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./ai_engine:/app
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - node_modules:/app/node_modules
    environment:
      - NODE_ENV=development
    networks:
      - app-network
    depends_on:
      - api

  swagger-ui:
    image: swaggerapi/swagger-ui:latest
    environment:
      SWAGGER_JSON: /api/api-document.yaml
    volumes:
      - ./docs/api-document.yaml:/api/api-document.yaml:ro
    ports:
      - "127.0.0.1:8081:8080"

  postgresql:
    image: postgres:16
    platform: linux/amd64
    ports:
      - "5432:5432"
    environment:
      POSTGRES_PASSWORD: postgres
      POSTGRES_USER: postgres
      POSTGRES_DB: db
      TZ: "Asia/Tokyo"
    volumes:
      - ./postgres/postgres_init:/docker-entrypoint-initdb.d
      - db-data:/var/lib/postgresql/data
    networks:
      - app-network

  # phpmyadmin:
  #   image: phpmyadmin
  #   ports:
  #     - "3001:80"
  #   environment:
  #     - PMA_HOST=mysql
  #     - PMA_USER=root
  #     - PMA_PASSWORD=mysql
  #   networks:
  #     - app-network
  #   depends_on:
  #     - mysql

volumes:
  db-data:
  node_modules:

networks:
  app-network:
    driver: bridge
