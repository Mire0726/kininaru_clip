openapi: "3.0.2"
info:
  title: "kininaru_clip_API"
  version: "2.0.0"
servers:
  - url: "http://localhost:8080"
  - url: "http://localhost:3000"
paths:
  /events/{eventId}:
    get:
      tags:
        - "events"
      summary: "Get event"
      oprerationId: "GetEvent"
      parameters:
        - name: "eventId"
          in: path
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Event created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createEventResponse"
  /events:
    post:
      tags:
        - "events"
      summary: "Create a new event"
      operationId: "createEvent"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/createEventInput"
      responses:
        "200":
          description: "Event created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/createEventResponse"

  /events/{eventId}/ideas:
    post:
      tags:
        - "ideas"
      summary: "Create a new idea"
      operationId: "createIdea"
      parameters:
        - name: "eventId"
          in: path
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ideaRequest"
      responses:
        "200":
          description: "Idea created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ideaResponse"
    get:
      tags:
        - "ideas"
      summary: "Get ideas categorized by tag"
      operationId: "getIdeaList"
      parameters:
        - name: "eventId"
          in: path
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Get a list of idea"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/categorizedIdeaResponse"

  /events/{eventId}/users:
    post:
      tags:
        - "users"
      summary: "Create Users"
      operationId: "createUsers"
      description: "指定したイベントに複数のユーザーを登録する"
      parameters:
        - in: path
          name: eventId
          required: true
          description: "イベントの一意な識別子"
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              description: "作成するユーザーの入力情報の配列"
              items:
                type: object
                description: "ユーザーの入力情報"
                properties:
                  name:
                    type: string
                    description: "ユーザーの名前"
                required:
                  - name
              example:
                - name: "山田花子"
      responses:
        "200":
          description: "Users created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    description: "作成されたユーザー情報の配列"
                    items:
                      $ref: "#/components/schemas/user"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    description: "エラーメッセージ"
        "409":
          description: "既にユーザーが存在しています"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    description: "エラーメッセージ"
    get:
      tags:
        - "users"
      summary: "Get a list of users"
      operationId: "getUsers"
      parameters:
        - name: "eventId"
          in: path
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Get list of user"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userList"
        "404":
          description: "Event not found"
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "event not found"

  /events/{eventId}/ideas/{ideaId}:
    get:
      tags:
        - "ideas"
      summary: "Get an idea by event id"
      operationId: "getIdea"
      parameters:
        - name: "eventId"
          in: path
          required: true
          schema:
            type: "string"
        - name: "ideaId"
          in: path
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Get an idea"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ideaResponse"
    put:
      tags:
        - "ideas"
      summary: "Update idea"
      operationId: "updateIdea"
      parameters:
        - name: "eventId"
          in: path
          required: true
          schema:
            type: "string"
        - name: "ideaId"
          in: path
          required: true
          schema:
            type: "string"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ideaUpdateRequest"
      responses:
        "200":
          description: "Get an idea"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ideaResponse"
    delete:
      tags:
        - "ideas"
      summary: "Delete an idea"
      operationId: "deleteIdea"
      parameters:
        - name: "eventId"
          in: path
          required: true
          schema:
            type: "string"
        - name: "ideaId"
          in: path
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Delete an idea"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Idea deleted successfully"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  message:
                    type: "string"
                    description: "エラーメッセージ"

  /events/{eventId}/ideas/{ideaId}/likes:
    put:
      tags:
        - "ideas"
      summary: "Update idea's likes"
      operationId: "updateLikes"
      parameters:
        - name: "eventId"
          in: path
          required: true
          schema:
            type: "string"
        - name: "ideaId"
          in: path
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Get an idea"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ideaResponse"

  /events/{eventId}/ideas/{ideaId}/summary:
    post:
      tags:
        - "ideas"
      summary: "Update idea's summary"
      operationId: "updateSummary"
      parameters:
        - name: "eventId"
          in: path
          required: true
          schema:
            type: "string"
        - name: "ideaId"
          in: path
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Update an idea's summary"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ideaResponse"

  /events/{eventId}/ideas/{ideaId}/recommends:
    get:
      tags:
        - "recommends"
      summary: "Get recommend items"
      operationId: "getRecommend"
      parameters:
        - name: "eventId"
          in: path
          required: true
          schema:
            type: "string"
        - name: "ideaId"
          in: path
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: "Get recommend items"
          content:
            application/json:
              schema:
                type: "object"
                properties:
                  recommends:
                    type: "array"
                    items:
                      $ref: "#/components/schemas/recommendResponse"

components:
  schemas:
    createEventInput:
      type: object
      properties:
        title:
          type: string
          description: "イベントのタイトル"
        url:
          type: "string"
        users:
          type: "array"
          description: "作成するユーザーの入力情報の配列"
          items:
            type: object
            properties:
              name:
                type: string
                description: "ユーザーの名前"
            required:
              - name
      required:
        - "title"
        - "url"
        - "users"

    createEventResponse:
      type: object
      properties:
        id:
          type: string
          format: uuid
          description: "イベントの一意な識別子"
        title:
          type: string
          description: "イベントのタイトル"
        url:
          type: "string"
          description: "イベントのURL"
      required:
        - "id"
        - "title"
        - "url"

    ideaRequest:
      type: "object"
      properties:
        title:
          type: "string"
        url:
          type: "string"
        created_by:
          type: "string"
        tag:
          type: "string"
        memo:
          type: "string"
      required:
        - "title"
        - "url"
        - "created_by"
        - "tag"
    ideaUpdateRequest:
      type: "object"
      properties:
        title:
          type: "string"
        url:
          type: "string"
        summary:
          type: "string"
        memo:
          type: "string"

    ideaResponse:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        title:
          type: "string"
        url:
          type: "string"
        createdBy:
          type: "string"
          format: "uuid"
        createdByName:
          type: "string"
        tag:
          type: "string"
        memo:
          type: "string"
        eventId:
          type: "string"
          format: "uuid"
        likes:
          type: "integer"
          format: "int32"
        summary:
          type: "string"

    categorizedIdeaResponse:
      type: "object"
      properties:
        location:
          type: "array"
          items:
            $ref: "#/components/schemas/ideaResponse"
        restaurant:
          type: "array"
          items:
            $ref: "#/components/schemas/ideaResponse"
        hotel:
          type: "array"
          items:
            $ref: "#/components/schemas/ideaResponse"
        other:
          type: "array"
          items:
            $ref: "#/components/schemas/ideaResponse"

    user:
      type: "object"
      properties:
        id:
          type: string
          description: "ユーザーの一意な識別子"
        name:
          type: string
          description: "ユーザーの名前"
        eventId:
          type: string
          description: "関連するイベントの識別子"
      required:
        - "id"
        - "name"
        - "eventId"

    userList:
      type: "object"
      properties:
        users:
          type: "array"
          items:
            $ref: "#/components/schemas/user"
      required:
        - "users"

    recommendResponse:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
        name:
          type: "string"
        url:
          type: "string"
        idea_id:
          type: "string"
          format: "uuid"
        content:
          type: "string"
      required:
        - "id"
        - "name"
        - "url"
        - "idea_id"
        - "content"
